# -*- mode: org; coding: utf-8 -*-
#+TITLE:Emacs config using org-mode
#+AUTHOR:GRC <rongchaogao[at]gmail[dot]com>
#+DATE: 2013-12-20

* 声明全局变量
#+begin_src emacs-lisp
  ;; global variables
  (defconst *is-mac-p* (eq system-type 'darwin))
  (defconst *is-win-p* (eq system-type 'windows-nt))
#+end_src

* 字体和编码
#+begin_src emacs-lisp
  ;; unicad -  Universal Charset Auto Detector
  ;; http://www.emacswiki.org/emacs/Unicad
  (require 'unicad nil 'noerror)
  
  ;; enforce utf-8 as the default coding system
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  
  (setq system-time-locale "C")
  
  (when window-system
    ;; Setting English Font
		;; 我们这里用的Monaco字体，因为window下没有，所以我们先安装
		;; 字体文件在font中，扔到C:\Windows\Fonts里面就可以了
    (if *is-mac-p*
        (set-face-attribute 'default nil :font "Monaco 14"))
    (if *is-win-p*
        (set-face-attribute 'default nil :font "Monaco 10"))
    ;; Chinese Font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset
                        (font-spec :family "Microsoft YaHei" :size 14))))
  
  (mapc
   (lambda (face)
     (set-face-attribute face nil :weight 'normal :underline nil))
   (face-list))
#+end_src

* 启动画面
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq gnus-inhibit-startup-message t)
  (setq column-number-mode t)
  (setq line-number-mode t)
#+END_SRC

* 主题设置
下载color-themes的配色方案，然后把themes文件夹和
color--theme.el放到.emacs.d的文件中。就可以了。
然后当你重新打开emacs的时候，就会看到Tools里面有
一个color-themes的选项了。你点击以后会发现里面有
很多的配色方案，光标移动到某一个方案上按Enter就可以
显示该方案。确定好自己选的themes以后在下面配置的
最后一行修改。我现在用的是gnome2.你可以换成其他的。
主题的名称如果有空格，用连字符代替空格。
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/")
  (require 'color-theme)
  (color-theme-initialize)
  (color-theme-gnome2)
  #+END_SRC
* 隐藏工具栏
#+BEGIN_SRC emacs-lisp
  (custom-set-variables '(tool-bar-mode nil))
#+END_SRC
* 编程设置
** cperl-mode
有一篇文章讲解cperl-modea: http://www.khngai.com/emacs/perl.php 
cperl is a more advanced mode for programming Perl than the default perl Mode.
#+BEGIN_SRC emacs-lisp
  ;;; cperl-mode
  ;;; http://www.emacswiki.org/emacs/CPerlMode
   (mapc (lambda (pair)
           (if (eq (cdr pair) 'perl-mode)
               (setcdr pair 'cperl-mode)))
         (append auto-mode-alist interpreter-mode-alist))
   ;; customizing cperl-mode
   (defun wf-cperl-mode-init ()
     (setq cperl-font-lock t
           cperl-electric-keywords t
           ;; http://www.emacswiki.org/emacs/IndentingPerl
           cperl-indent-level 4
           cperl-indent-parens-as-block t
           cperl-close-paren-offset -4
           cperl-continued-brace-offset -4
           cperl-continued-statement-offset 4
           cperl-extra-newline-before-brace t
           cperl-brace-offset -4
           cperl-label-offset -2
           cperl-tab-always-indent nil
           cperl-extra-newline-before-brace nil
           cperl-extra-newline-before-brace-multiline nil)
     (local-set-key (kbd "C-h f") 'cperl-perldoc)
     (define-abbrev-table 'global-abbrev-table
       '(("pdbg"   "use Data::Dumper qw( Dumper );\nwarn Dumper[];" nil 1)
         ("phbp"   "#!/usr/bin/perl -w"                             nil 1)
         ("pusc"   "use Smart::Comments;\n\n### "                   nil 1)
         ("putm"   "use Test::More 'no_plan';"                      nil 1)))
     (custom-set-faces
      '(cperl-array-face ((t (:background nil :weight normal))))
      '(cperl-hash-face  ((t (:background nil :weight normal))))))
   (add-hook 'cperl-mode-hook 'wf-cperl-mode-init)
  
  
  
  (global-set-key (kbd "C-c s") 'compile-dwim-compile)
  (global-set-key (kbd "C-c r") 'compile-dwim-run)
  (setq compilation-buffer-name-function 'pde-compilation-buffer-name)
  (autoload 'compile-dwim-run "compile-dwim" "Build and run" t)
  (autoload 'compile-dwim-compile "compile-dwim" "Compile or check syntax" t)
  (autoload 'executable-chmod "executable"
            "Make sure the file is executable.")
#+END_SRC
** c & cpp
Major mode for editing c and cpp files.
#+begin_src emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              (turn-on-auto-fill)
              (setq comment-column 60)
              (modify-syntax-entry ?_ "w")     ; now '_' is not considered a word-delimiter
              (c-set-style "ellemtel")         ; set indentation style
              (local-set-key [(control tab)]   ; move to next tempo mark
                             'tempo-forward-mark)))
  (setq auto-mode-alist
        (append '(("\\.h$" . c++-mode)) auto-mode-alist))
#+end_src
** auto-complete
** LaTeX
#+BEGIN_SRC emacs-lisp
  ;;添加新的org-export-latex-classes
  (require 'org-latex)
  (add-to-list 'org-export-latex-classes 
  '("ctexart" 
  "\\documentclass{ctexart}
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{fixltx2e}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{soul}
  \\usepackage{textcomp}
  \\usepackage{marvosym}
  \\usepackage{wasysym}
  \\usepackage{latexsym}
  \\usepackage{amssymb}
  \\usepackage{hyperref}
  \\usepackage{listings}
  \\usepackage{color}
  \\usepackage{xcolor}
  \\definecolor{background}{rgb}{0.9,0.9,0.9}
  \\tolerance=1000
  [NO-DEFAULT-PACKAGES]
  [NO-PACKAGES]"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  ;;上面definecolor用来自定义染色
  
  ;;程序代码的配置
  ;;首先要安装listings这个宏包
  ;;使用listing来配置
  (setq org-export-latex-listings t)
  (setq org-export-latex-listings-options
  '(
  ;;设置等宽字体
  ("columns" "flexible")
  ;;背景颜色的设置
  ("backgroundcolor" "\\color{background}")
  ;;("frame" "single")
  ;;代码框样式的设置
  ("frame" "trBL")
  ;;代码框四个边角的设置
  ("frameround" "fttt")
  ;;允许断行
  ("breaklines=true")
  ;;设置字体大小，字体
  ;;("basicstyle" "\\ttfamily\\small")
    
                         ))
#+END_SRC

** lisp
*** slime
#+BEGIN_SRC emacs-lisp
  ;; slime
  ;;(when *hack-slime-p*
    (if *is-mac-p*
      (progn
       (setq inferior-lisp-program "sbcl")
       (load (expand-file-name "~/quicklisp/slime-helper.el"))))
    (if *is-win-p*
      (progn
        (setq inferior-lisp-program "clisp.exe")
        (load "C:\\quicklisp\\slime-helper.el")))
  
#+END_SRC
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
   ;;; emacs-lisp-mode
    ;; now '-' is not considered a word-delimiter
    (add-hook 'emacs-lisp-mode-hook
              '(lambda ()
                 (modify-syntax-entry ?- "w")))
#+END_SRC

** R语言配置(ESS)
*** ESS的安装和使用
+ 安装R
+ 安装emacs
+ 下载ESS:
http://ess.r-project.org/index.php?Section=download
然后放在.emacs.d/site-lisp/下面，并重命名为ess。然后
按照下面配置。
+ c-x 2可以带两个窗口，c-x 3 可以打开3个窗口

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/ess/lisp")
  ;;(require 'ess-site)
  ;;这句话，下面的代码里有了。
  
  ;(setq ess-eval-visibly-p nil)
  (setq ess-ask-for-ess-directory nil)
  (require 'ess-eldoc)
  
#+END_SRC
*** ESS Shift Enter
http://www.emacswiki.org/emacs/ESSShiftEnter
以下内容摘自上面网站。
下面这些配置，让我可以用一个快捷键绑定做到三件事情：
+ 如果R没有启动，他自动启动，并且打开一个窗口
+ 如果这段区域是活动的，那么计算这段区域
+ 其他情况下：运行当前行
shift+Enter启动和运行R。
一下代码为当R启动的时候，把emacs窗口分为上下两屏。
当然我们也可以设置为左右两屏。
#+BEGIN_SRC emacs-lisp
  (setq ess-ask-for-ess-directory nil)
   (setq ess-local-process-name "R")
   (setq ansi-color-for-comint-mode 'filter)
  
   ;;下面几行的作用：设置自动下拉方式
   ;;也就是你运行代码以后，R窗口会自动下拉，保持你最后运行的
   ;;代码能后显示
   (setq comint-prompt-read-only t)
   (setq comint-scroll-to-bottom-on-input t)
   (setq comint-scroll-to-bottom-on-output t)
   (setq comint-move-point-for-output t)
    
  (defun my-ess-start-R ()
     (interactive)
     (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
       (progn
         (delete-other-windows)
         (setq w1 (selected-window))
         (setq w1name (buffer-name))
         ;;这句话是左右分屏，下面注释的一句是上下分屏
         (setq w2 (split-window w1 nil t))
         ;;(setq w2 (split-window w1))
         (R)
         (set-window-buffer w2 "*R*")
         (set-window-buffer w1 w1name))))
    
    
  (defun my-ess-eval ()
     (interactive)
     (my-ess-start-R)
     (if (and transient-mark-mode mark-active)
         (call-interactively 'ess-eval-region)
       (call-interactively 'ess-eval-line-and-step)))
    
    
  (add-hook 'ess-mode-hook
             '(lambda()
                (local-set-key [(shift return)] 'my-ess-eval)))
  
  (add-hook 'inferior-ess-mode-hook
             '(lambda()
                (local-set-key [C-up] 'comint-previous-input)
                (local-set-key [C-down] 'comint-next-input)))
  
  
  ;;控制分屏
  (add-hook 'Rnw-mode-hook
            '(lambda()
               (local-set-key [(shift return)] 'my-ess-eval)))
  
  
   (require 'ess-site)
#+END_SRC
*** 切换左右屏和上下屏
我们在配置中设定了以后，但是可能会随着环境的变化
而需要临时的改变，所以我们通过下面的方法进行修改：
c-x 1这个命令会关闭左右窗口，然后重新shift+enter
这样打开的窗口和刚才的就不同了，换成不同于上面的另外
一种方式。
*** ESS快捷键总结
| c-c c-n     | 当前行       |
| c-c c-c     | 当前段       |
| c-c c-b     | 当前整个文件 |
| shift enter | 上面的作用   |
ESS 要求编辑以.R为结尾的文件。

*** R的自动补全插件:Autocomplete source for R
http://www.emacswiki.org/emacs/ac-R.el
下面文件以后，扔到上面的路径里,也就是/ess/lisp。
然后在配置中添加一行,然后添加一些内容使R能够自动补全双引号，
括号等。配置完成以后，要重启emacs生效。
#+BEGIN_SRC emacs-lisp
  (require 'ac-R)
  
  
  ;;http://www.emacswiki.org/emacs/ESSAutoParens
  ;; enable skeleton-pair insert globally
     (setq skeleton-pair t)
    ;;(setq skeleton-pair-on-word t)
     (global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "\'") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "\`") 'skeleton-pair-insert-maybe)
     ;;(global-set-key (kbd "<") 'skeleton-pair-insert-maybe)
#+END_SRC
*** 参数列表的显示
#+BEGIN_SRC emacs-lisp
  (define-key ess-mode-map [f2] 'ess-r-args-show)
  (define-key ess-mode-map [f3] 'ess-r-args-insert)
  (define-key inferior-ess-mode-map [f2] 'ess-r-args-show)
  (define-key inferior-ess-mode-map [f3] 'ess-r-args-insert)
#+END_SRC
*** debug
#+BEGIN_SRC emacs-lisp
  (require 'ess-tracebug)
#+END_SRC
* org-mode
Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.
#+begin_src emacs-lisp
  (require 'org)
  (require 'remember)
  (require 'org-mouse)
  
  ;; I want files with the extension ".org" to open in org-mode.
  (add-to-list 'auto-mode-alist
               '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  
  ;; Some basic keybindings.
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cr" 'org-remember)
  
  ;; a basic set of keywords to start out
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STRT(s)" "|" "DONE(d)")
          (sequencep "WAIT(w@/!)" "|" "CANL(c@/!)")))
  
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAIT" :foreground "orange" :weight bold)
          ("CANL" :foreground "forest green" :weight bold)))
  
  ;; I use org's tag feature to implement contexts.
  (setq org-tag-alist '(("OFFICE"  . ?o)
                        ("HOME"    . ?h)
                        ("SERVER"  . ?s)
                        ("PROJECT" . ?p)))
  
  ;; I put the archive in a separate file, because the gtd file will
  ;; probably already get pretty big just with current tasks.
  (setq org-archive-location "%s_archive::")
  
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
  
#+end_src
